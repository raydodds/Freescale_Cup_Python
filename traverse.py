#
#	Traverse a graph generated by trapezoid_map
#

__author__ = "Ray Dodds, Jonathan Schenk"

import node as n
import line
import trap

def traverse(root, lines):
	
	num_lines = len(lines)

	pnodes = [None]*num_lines
	qnodes = [None]*num_lines
	snodes = []

	p = []
	q = []
	s = []

	for i in range(0, num_lines):
		snodes += [[]]
		p += [[]]
		q += [[]]
		s += [[]]

	traps = []

	def trav(node):
		if(type(node) == n.PointNode):
			# FIGURE OUT IF P(start) OR Q(end)
			a = None
			anodes = None
			if(lines[node.lindex].start == node.point):
				a = p
				anodes = pnodes
			else:
				a = q
				anodes = qnodes

			if(anodes[node.lindex] == None):
				anodes[node.lindex] = node

			if(len(a[node.lindex]) == 0):
				sides = [node.left, node.right]
				for side in sides:
					# Add the side and traverse
					a[node.lindex].append(side)
					trav(side)
			
		elif(type(node) == n.SegNode):

			snodes[node.lindex].append(node)
			#Check sides
			sides = [node.left, node.right]
			for side in sides:
				if(side == None):
					print("_________________________________________")
					print("None issue:")
					print(node)
					print(node.parent)
					print("_________________________________________")
				if(side not in s[node.lindex]):
					s[node.lindex].append(side)
					trav(side)

		elif(type(node) == n.TrapNode):
			# Add node to the list of traps
			if(node not in traps):
				node.tindex = len(traps)
				traps.append(node)
		else:
			print("How did you get here?")

	trav(root)

	traps.sort(key=lambda x: int(x.name[1:]))

	return bigSadMatrixBuilder( pnodes, p, qnodes, q, snodes, s, traps )

	


def test():
	p00 = (40, 5)
	p01 = (95, 15)
	p10 = (60, 55)
	p11 = (95, 15)
	p20 = (5, 40)
	p21 = (55, 20)
	p30 = (30, 60)
	p31 = (70, 60)

	bb_bl = (0,0)
	bb_tl = (0, 100)
	bb_tr = (100, 100)
	bb_br = (100, 0)

	bb_top = line.Line(bb_tl, bb_tr)
	bb_bottom = line.Line(bb_bl, bb_br)

	l0 = line.Line(p00, p01)
	l1 = line.Line(p10, p11)
	l2 = line.Line(p20, p21)
	l3 = line.Line(p30, p31)

	lines = [l0, l1, l2, l3]

	#begin p0
	p0 = n.PointNode(p00, 0)
	
	#begin p2
	p2 = n.PointNode(p20, 2)
	p0.add_left(p2)

	#begin t0
	t_0 = trap.Trap(bb_top, bb_bottom, bb_tl, p20)
	t0 = n.TrapNode(t_0)
	p2.add_left(t0)
	#end t0

	#begin s2
	s2_0 = n.SegNode(l2, 2)
	p2.add_right(s2_0)

	#begin p3
	p3 = n.PointNode(p30, 3)
	s2_0.add_left(p3)

	#begin t1
	t_1 = trap.Trap(bb_top, l2, p20, p30)
	t1 = n.TrapNode(t_1)
	p3.add_left(t1)
	#end t1

	#begin s3
	s3_0 = n.SegNode(l3, 3)
	p3.add_right(s3_0)
	
	#begin t2
	t_2 = trap.Trap(bb_top, l3, p30, p31)
	t2 = n.TrapNode(t_2)
	s3_0.add_left(t2)
	#end t2

	#begin t3
	t_3 = trap.Trap(l3, l2, p30, p21)
	t3 = n.TrapNode(t_3)
	s3_0.add_right(t3)
	#end t3
	#end s3
	#end p3

	#begin t4
	t_4 = trap.Trap(l2, bb_bottom, p20, p00)
	t4 = n.TrapNode(t_4)
	s2_0.add_right(t4)
	#end t4
	#end s2
	#end p2

	# begin q0
	q0 = n.PointNode(p01, 0)
	p0.add_right(q0)

	#begin s0
	s0_0 = n.SegNode(l0, 0)
	q0.add_left(s0_0)

	#begin p1
	p1 = n.PointNode(p10, 1)
	s0_0.add_left(p1)

	#begin q2
	q2 = n.PointNode(p21, 2)
	p1.add_left(q2)

	#begin s2
	s2_1 = n.SegNode(l2, 2)
	q2.add_left(s2_1)

	#add p3
	s2_1.add_left(p3)

	#begin t5
	t_5 = trap.Trap(l2, l0, p00, p21)
	t5 = n.TrapNode(t_5)
	s2_1.add_right(t5)
	#end_t5
	#end s2

	#begin s3
	s3_1 = n.SegNode(l3, 3)
	q2.add_right(s3_1)

	#add t2
	s3_1.add_left(t2)
	
	#begin t6
	t_6 = trap.Trap(l3, l0, p21, p10)
	t6 = n.TrapNode(t_6)
	s3_1.add_right(t6)
	#end t6
	#end s3
	#end q2

	#begin s1
	s1_0 = n.SegNode(l1, 1)
	p1.add_right(s1_0)

	#begin q3
	q3 = n.PointNode(p31, 3)
	s1_0.add_left(q3)

	#begin_s3
	s3_2 = n.SegNode(l3, 3)
	q3.add_left(s3_2)

	#add t2
	s3_2.add_left(t2)

	#begin t7
	t_7 = trap.Trap(l3, l1, p31, p10)
	t7 = n.TrapNode(t_7)
	s3_2.add_right(t7)
	#end t7
	#end s3

	#begin t8
	t_8 = trap.Trap(bb_top, l1, p31, p01)
	t8 = n.TrapNode(t_8)
	q3.add_right(t8)
	#end t8
	#end q3

	#begin t9
	t_9 = trap.Trap(l1, l0, p10, p01)
	t9 = n.TrapNode(t_9)
	s1_0.add_right(t9)
	#end t9
	#end s1

	#begin t10
	t_10 = trap.Trap(l0, bb_bottom, p00, p01)
	t10 = n.TrapNode(t_10)
	s0_0.add_right(t10)
	#end t10
	#end s0

	#begin t11
	t_11 = trap.Trap(bb_top, bb_bottom, p01, bb_tr)
	t11 = n.TrapNode(t_11)
	q0.add_right(t11)
	#end t11
	#end q0
	#end p0

	q1 = None

	print("Graph")
	points = [p0, p1, p2, p3, q0, q1, q2, q3]
	for point in points:
		if point is not None:
			print(point, point.left, point.right, sep='\n\t')


	print("Done assembling graph")

	big_sad_matrix = traverse(p0, lines)
	"""
	print("\nPNODES")
	for i in range(len(lines)):
		print(i, pnodes[i])
		for child in p[i]:
			print('\t'+str(child))
	print("\nQNODES")
	for i in range(len(lines)):
		print(i, qnodes[i])
		for child in q[i]:
			print('\t'+str(child))
	print("\nSNODES")
	for i in range(len(lines)):
		print(i, snodes[i])
		for child in s[i]:
			print('\t'+str(child))
	
	print("\nTRAPS")
	for i in range(len(traps)):
		print(i, traps[i])
	"""
	for mline in big_sad_matrix:
		for i in range(len(mline)):
			if(i < len(mline)-1):
				print(mline[i], end=',')
			else:
				print(mline[i])
	

def bigSadMatrixBuilder(pnodes, p, qnodes, q, snodes, s, traps):

	# find the index of a node
	def findex(node):
		if(type(node) == n.PointNode):
			try:
				ind = pnodes.index(node)
			except ValueError:
				ind = qnodes.index(node)+len(pnodes)
			return ind
		elif(type(node) == n.SegNode):
			for i in range(len(snodes)):
				if(node in snodes[i]):
					ind = i + 2*len(pnodes)
					return ind
		elif(type(node) == n.TrapNode):
			ind = traps.index(node) + 2*len(pnodes) + len(snodes)
			return ind
		else:
			return None

	bigsad = []
	sumLen = len(pnodes)+len(qnodes)+len(snodes)+len(traps)

	# Build the big sad matrix
	for i in range(sumLen+2):
		bigsad += [[0]*(sumLen+2)]

	# Label the big sad matrix
	names = []
	for i in range(len(pnodes)):
		if(pnodes[i] is not None):
			names += [pnodes[i].name]
		else:
			names += ['P'+str(i)]

	for i in range(len(qnodes)):
		if(qnodes[i] is not None):
			names += [qnodes[i].name]
		else:
			names += ['Q'+str(i)]

	for i in range(len(snodes)):
		if(snodes[i] is not None):
			names += [snodes[i][0].name]
		else:
			names += ['S'+str(i)]

	for i in range(len(traps)):
		print(traps[i])
		names += [traps[i].name]

	names += ['Sum']

	for i in range(len(names)):
		bigsad[i+1][0] = names[i]
		bigsad[0][i+1] = names[i]
	
	currOff = 0

	for i in range(len(p)):
		for ni in p[i]:
			ind = findex(ni)
			if(ind != None):
				bigsad[ind+1][i+1] = 1

	currOff += len(p)
	
	for i in range(len(q)):
		for ni in q[i]:
			ind = findex(ni)
			if(ind != None):
				bigsad[ind+1][i+currOff+1] = 1

	currOff += len(q)

	for i in range(len(s)):
		for ni in s[i]:
			ind = findex(ni)
			if(ind != None):
				bigsad[ind+1][i+currOff+1] = 1

	# do sum stuff
	for i in range(1, len(bigsad)-1):
		hsum = 0
		vsum = 0
		for j in range(1, len(bigsad)-1):
			hsum += bigsad[i][j]
			vsum += bigsad[j][i]
		bigsad[i][len(bigsad)-1] = hsum
		bigsad[len(bigsad)-1][i] = vsum

	return bigsad

if __name__ == '__main__':
	test()
